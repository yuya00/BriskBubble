

--------------------------------------------------------------

[System.Serializable]
構造体やクラスなどをインスペクターに表示する
構造体と実体の前にpublicが必要

[SerializeField]
private変数をインスペクターで表示する

[System.NonSerialized]
public変数をインスペクターに表示しない
シリアライズされない。
※[HideInInspector]もあるが、これは表示しないだけなので、
シリアライズはされてしまう。


[Header("近接範囲")]
変数の上に文字を表示できる

[Range(0, 50)]
変数をスライダーで変更できる

[Tooltip("半径")]
カーソルを合わせるとテキストが表示される



--------------------------------------------------------------

readonly
コンストラクタ内でも初期化可能,new可能
constは、列挙型の定義などの
コンパイル時に値が必要な場合に使用する


throw new System.ArgumentException(string.Format("角度がおかしい"));
エラーを表示させる

m_,g_,i_
メンバ変数,グローバル変数,引数の頭にを付ける

var 
autoと同じ仕様




回転の方法 -----------------------------------------------------

//上書き
// ローカル座標を基準に、回転を取得
Vector3 localAngle = transform.localEulerAngles(eulerAngles);

Vector3 newAngle;
newAngle.x = 10.0f;	// 回転角度代入
newAngle.y = 10.0f;
newAngle.z = 10.0f;

transform.localEulerAngles = newAngle;	  // 回転角度を設定


//加算
// ローカル座標基準で、現在の回転量へ加算する
transform.Rotate (0.0f, 5.0f, 0.0f (,Space.World) );


// 指定した方向を見る
// LookAt
transform.LookAt(transform.position);	//プレイヤーを見るカメラに使用
transform.LookAt(transform.position + input);	//進む方向を見る

// --Quaternion.Slerp
// ターゲット方向のベクトルを取得
Vector3 relativePos = targetObject.transform.position - this.transform.position;
// 方向を、回転情報に変換
Quaternion rotation = Quaternion.LookRotation (relativePos);
// 現在の回転情報と、ターゲット方向の回転情報を補完する
transform.rotation  = Quaternion.Slerp (this.transform.rotation, rotation, speed);




OnGUI　--------------------------------------------------------

// 半透明のフキダシを敷く
GUILayout.BeginVertical("box");
GUILayout.EndVertical();

// 半透明のフキダシの上に文字表示
GUILayout.TextArea("状態\n state：" + state.ToString());

// タイトル
GUILayout.Box("Title");

// スクロールビュー
leftScrollPos = GUILayout.BeginScrollView(leftScrollPos, GUILayout.Width(200), GUILayout.Height(100));
GUILayout.EndScrollView();

// スペース
GUILayout.Space(10);

// ボタン
if (GUILayout.Button("Button")) {
	Debug.Log("Clicked the image");
}
if (GUILayout.Button("Button", GUILayout.Width(70))) {
	Debug.Log("Clicked the image");
}

// トグル(チェックボタン)
toggleflg = GUILayout.Toggle(toggleflg, "Toggle");




その他 --------------------------------------------------------------

sceneで同じところの値を変更したらコンフリクトする
手動でマージすることが出来る
sceneで違うところの値を変更したらコンフリクトせず
それぞれの部分が上書きされる

逐一切り替える場合のコメント(/*　→　//*)
/*
Debug.Log("Hit");
// */

public sealed class
継承しないクラスの宣言に付ける
コードサイズが減り、実行速度が速くなる

xzの値だけ取得する場合
Vector3 myPositionXZ = Vector3.Scale(myPosition, new Vector3(1.0f, 0.0f, 1.0f));

構造体は継承出来ない

BoxCastはGizmoのDrawWireCubeでは可視化出来ない
DrawWireCubeには回転情報がないため
BoxCastはRayを複数組み合わせて可視化する

BoxCastは最初に触れているオブジェクトとは
判定しない

関数はキャメル記法
変数はスネーク記法


構造体の作り方 --------------------------------------

・inspectorに表示する場合

必ずどちらもpublic

定数は表示されない


[System.Serializable]
public class TreadOn_BoxCast : BoxCastBase {
	public const int JUMP_POWER		 = 30;
}
[Header("踏みつけ判定")]
public TreadOn_BoxCast tread_on;




・コード内で完結する場合

基本的にどちらもprivate

定数は構造体名で取得
WallGrabAdjust.BIG_VALUE


private struct WallGrabAdjust {
	public Vector2 forward;

	//存在しない大きな値
	public const int BIG_VALUE = 999;
}
private WallGrabAdjust wall_grab_adjust;




便利機能 --------------------------------------------------------------

関数を全て閉じる(ifなどは閉じない)
ctl + m + o

コピーボードから貼り付ける()
ctl + shift + v




あとから --------------------------------------------------------------

プレイヤーのアニメ処理は違うスクリプトに分けたほうが良いかも



