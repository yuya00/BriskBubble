rigidbody
Drag		 0   →　1
Angular Drag 0.5 →　1

ジャンプ時は移動減



[System.Serializable]
構造体やクラスなどをインスペクターに表示する
構造体と実体の前にpublicが必要

[SerializeField]
private変数をインスペクターで表示する

[System.NonSerialized]
public変数をインスペクターに表示しない
シリアライズされない。
※[HideInInspector]もあるが、これは表示しないだけなので、
シリアライズはされてしまう。


[Header("近接範囲")]
変数の上に文字を表示できる

[Range(0, 50)]
変数をスライダーで変更できる

[Tooltip("半径")]
カーソルを合わせるとテキストが表示される

readonly
コンストラクタ内でも初期化可能,new可能
constは、列挙型の定義などの
コンパイル時に値が必要な場合に使用する


throw new System.ArgumentException(string.Format("角度がおかしい"));
エラーを表示させる

m_,g_,i_
メンバ変数,グローバル変数,引数の頭にを付ける

var 
autoと同じ仕様

回転の方法 ------------------------

//上書き
// ローカル座標を基準に、回転を取得
Vector3 localAngle = transform.localEulerAngles(eulerAngles);

Vector3 newAngle;
newAngle.x = 10.0f;	// 回転角度代入
newAngle.y = 10.0f;
newAngle.z = 10.0f;

transform.localEulerAngles = newAngle;	  // 回転角度を設定


//加算
// ローカル座標基準で、現在の回転量へ加算する
transform.Rotate (0.0f, 5.0f, 0.0f (,Space.World) );


// 指定した方向を見る
// LookAt
transform.LookAt(transform.position);	//プレイヤーを見るカメラに使用
transform.LookAt(transform.position + input);	//進む方向を見る

// --Quaternion.Slerp
// ターゲット方向のベクトルを取得
Vector3 relativePos = targetObject.transform.position - this.transform.position;
// 方向を、回転情報に変換
Quaternion rotation = Quaternion.LookRotation (relativePos);
// 現在の回転情報と、ターゲット方向の回転情報を補完する
transform.rotation  = Quaternion.Slerp (this.transform.rotation, rotation, speed);

--------------------------------------------------------------


OnGUI ------------------------

// 半透明のフキダシを敷く
GUILayout.BeginVertical("box");
GUILayout.EndVertical();

// 半透明のフキダシの上に文字表示
GUILayout.TextArea("状態\n state：" + state.ToString());

// タイトル
GUILayout.Box("Title");

// スクロールビュー
leftScrollPos = GUILayout.BeginScrollView(leftScrollPos, GUILayout.Width(200), GUILayout.Height(100));
GUILayout.EndScrollView();

// スペース
GUILayout.Space(10);

// ボタン
if (GUILayout.Button("Button")) {
	Debug.Log("Clicked the image");
}
if (GUILayout.Button("Button", GUILayout.Width(70))) {
	Debug.Log("Clicked the image");
}

// トグル(チェックボタン)
toggleflg = GUILayout.Toggle(toggleflg, "Toggle");

--------------------------------------------------------------

どちらもインスペクターで値を変更したら
コンフリクトする
手動でマージすることが出来る

コメント
/*
Debug.Log("Hit");
// */

コメントアウト
//*
Debug.Log("Hit");
// */


継承しないクラスの宣言に付ける
コードサイズが減り、実行速度が速くなる
public sealed class


Vector3 myPositionXZ = Vector3.Scale(myPosition, new Vector3(1.0f, 0.0f, 1.0f));






・//--
・ctl+m+o 畳む


やること　＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

・memo.txt用意

・記法変える?

・プレイヤーの当たり判定　カプセル

・向き調整再調整

・敵が崖に追い詰められたら落ちる

・敵が段差に近づいたらジャンプ





・カメラ追従を瞬間ではなく、
　徐々にする

・プレイヤーが落ちないようにする
　プレイヤーにも穴判定設定
　charabase
　trueなら

・Player_Const.cs作る


・左右ともレイが当たった回数が2～3回なら
　ATTACKに移行

　左右ともレイが当たった判定が曖昧
　何回もカウントされてしまう


・時々ジャンプしない






警戒
 右回り固定ではなく、最小角度

 回らずにすぐ向く
 プレイヤーがいたら視界に入るので発見に移行
 プレイヤーはおらず音だけなら、ゆっくり元の方向に戻る


落ちないようにするには
 下向きのレイを設置
 前方向*(壁判定のレイと同じ長さ)の位置から
 下方向*(ステージ最大高低差)分の長さに設定
 30度,330度で、二個配置

 

コードの色変える





あとから
・Enemyのインスペクターで
　Colliderの大きさを変更出来るようにする
　(Enemyの実体がないから出来ない?)
・扇形の向きが前後ろ逆
　影響範囲　逃走後のlookAt,壁周り判定
・敵にプレイヤーのプレハブを入れない
・敵の回転は時間ではなく、度数にする
・音範囲とショット音の当たり判定を見直す
・レイの角度を度数で調整できるようにする
　壁掴み時,横移動
　・左右の壁掴むと左右移動できない
　・掴んだ状態時だけの速さを設定する
