



やること　＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

変更箇所
敵　CapsuleCollider
-1.4
2.2
5.7

状態表示（吹き出し）
警戒　瞬間　！
発見　瞬間　！！
逃走　常時　汗
気絶　常時　混乱



コミットする前の整理
下レイの位置を着地判定位置として変数に保存



整理時,確認すること
charaRayコメント消去
charaRay子消去


charaBase

	protected CapsuleCollider   capsule_collider;
	protected Vector3       ground_ray_pos		 = Vector3.zero;
	protected float         ground_ray_length	 = 0.4f;


	    public virtual void Start()

			capsule_collider = GetComponent<CapsuleCollider>();
		//足元から0.1f上の位置
		ground_ray_pos = transform.position + 
			(transform.up * capsule_collider.center.y) - 
			(transform.up * (capsule_collider.height / 2)) + 
			(transform.up * 0.1f);



	public virtual void Move() {
		/***********************/
		// 試しに
		// ショットのレイヤーは8番
		// shotのレイヤーを設定している物とだけ衝突しない( ～ ←で条件を反転するから ～ を取ったらショットとだけ衝突するようになる )
		LayerMask shot_layer = ~(1 << 8);
		/***********************/
		//下レイが当たっていたら着地(CapsuleCollider参照)
		if (Physics.Raycast(ground_ray_pos, -transform.up, ground_ray_length, shot_layer)) {
			rigid.useGravity = true;
			is_ground = true;
			velocity.y = 0;
		}
		else {
			is_ground = false;
			//落下速度の上限
			if (velocity.y >= -fallspd_limit) {
				velocity.y += Physics.gravity.y * gravity_power * Time.deltaTime;
				//if (this.name == "Player") {
				//	Debug.Log(Physics.gravity.y);
				//	Debug.Log(gravity_power);
				//}
			}
			else {
				velocity.y += Physics.gravity.y * gravity_power / 10 * Time.deltaTime;
			}
		}
		
		//if (Physics.Linecast(chara_ray.position, chara_ray.position + Vector3.down * chara_ray_length, shot_layer)) {
		//	rigid.useGravity = true;
		//	is_ground = true;
		//	velocity.y = 0;
		//}
		//else {
		//  is_ground = false;
		//	if (velocity.y >= -fallspd_limit) { //落下速度の上限
		//		velocity.y += Physics.gravity.y * gravity_power * Time.deltaTime;
		//	}
		//	else {
		//		velocity.y += Physics.gravity.y * gravity_power/10 * Time.deltaTime;
		//	}
		//}

	}




	Enemy

	//chara_ray = transform.Find("CharaRay");



	Player

	    void RayDebug()
    {
        //*********************************************************************//
        //Debug.DrawLine(chara_ray.position, chara_ray.position + Vector3.down * chara_ray_length, Color.red);


		Player Shot


		    // ショットに乗った判定
    public bool DownHitShot()


	            // きっちり足元判定
            for (int i = 0; i < 9; ++i)
            {
				//           //下レイが当たっていたら着地
				//           if (Physics.Linecast(
				//ground_ray_pos + ofset_layer_pos[i],
				//ground_ray_pos + ofset_layer_pos[i] + Vector3.down * (ground_ray_length), layer))
				//           {
				//               shot_jump_fg = true;
				//               return true;
				//           }



逃走用モーション追加
気絶（踏みつけ成功時、プレイヤーへのダメージ判定一時消滅、静止）
攻撃（ショット）



逃走パターン追加
→跳ね回る、攻撃



敵
　屋上の敵がなぜか落ちる
　1.原因を見つける
　2.リスポーンする

　Enemy1はジャンプではなく、滑らかに動いていく

　ジャンプ準備判定falseの処理
　発見前
　ジャンプ後


　穴判定
　　右レイの後に左レイが判定されるので
　　左回転しがち

　壁当たり判定
　　左右ともレイが当たった回数が2～3回なら
　　ATTACKに移行
　
　　左右ともレイが当たった判定が曖昧
　　何回もカウントされてしまう


　サルゲッチュの逃げ方参考にする



ショット
　1.撃つ時に敵の方向を向く
　2.撃ってから追尾する
　谷澤のゲームを見せてもらう



Gizmo Build　エラー　調べる

ゲーム遷移しなくても良いシステム頼む

穴が分かりにくい

カメラ追従を瞬間ではなく、徐々にする

コードの色変える

3秒待ちたくない





確認　＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
Enemy1
  壁判定Ray
　1.9 3.0
  JumpRay
  2.0 3.9

Enemy1
  壁判定Ray
　2.8 1.8
  JumpRay
  2.9 2.6

test
　ブランチを新しく作る
　stage1をいじる
　変更部分をコピーする
yuya
　ペーストする
　コミットする

ジャンプ判定下限 より 壁判定下限が上




あとから　＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
・Enemyのインスペクターで
　Colliderの大きさを変更出来るようにする
　(Enemyの実体がないから出来ない?)

・敵の回転は時間ではなく、度数にする

・レイの角度を度数で調整できるようにする
　壁掴み時,横移動

・掴んだ状態時だけの速さを設定する

・壁掴み　低すぎたらreturn

・プレイヤーが落ちないようにする
　プレイヤーにも穴判定設定
　trueなら

・maptipのMeshColliderのConvexを消す

・プレイヤー依存、敵の速さ
　spd_ratio

・真上が当たったらすぐ落下

・隙間に落ちる問題
　隙間に突進するとColider同士の当たり判定より先に
　charaRayが隙間に入ってしまう
　オブジェクトが完全に重なってても落ちる
